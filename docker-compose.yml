services:
  web:
    build: .
    container_name: doors_shop_api
    volumes:
      - .:/app
    ports:
      - "8001:8000"
    depends_on:
      - redis
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=store_db
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - doors_shop_network
      - admin_network # <-- добавляем эту сеть

  redis:
    image: redis:7
    container_name: doors_shop_redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - doors_shop_network

  celery_worker:
    build: .
    container_name: doors_shop_celery
    command: celery -A app.tasks.worker worker --loglevel=info
    volumes:
      - .:/app
    depends_on:
      - web
      - redis
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - doors_shop_network

  nginx:
    image: nginx:latest
    container_name: doors_shop_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./static:/app/static
      - ./media:/app/media
    depends_on:
      - web
    networks:
      - doors_shop_network

volumes:
  redis_data:


networks:
  doors_shop_network:
    driver: bridge

  admin_network:
    # <-- Подключаемся к существующей сети админ-приложения
    external: true
    name: admin-backend_backend

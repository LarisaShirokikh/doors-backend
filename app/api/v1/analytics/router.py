# app/api/v1/analytics/router.py
from fastapi import APIRouter, Depends, BackgroundTasks, Query, Request
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List, Dict, Any, Optional
from app.core.database import get_async_db
from app.crud.product_ranking import ProductRanking

router = APIRouter()

def get_client_ip(request: Request) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏
    forwarded_for = request.headers.get("X-Forwarded-For")
    if forwarded_for:
        return forwarded_for.split(",")[0].strip()
    
    real_ip = request.headers.get("X-Real-IP")
    if real_ip:
        return real_ip
    
    # Fallback –Ω–∞ direct IP
    if hasattr(request.client, 'host'):
        return request.client.host
    
    return "unknown"

@router.get("/product/{product_id}/view/")
async def track_product_view(
    request: Request,
    product_id: int,
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    page_type: Optional[str] = Query(None),
    location: Optional[str] = Query(None),
    referrer: Optional[str] = Query(None),
    device_type: Optional[str] = Query(None),
    url: Optional[str] = Query(None),
    timestamp: Optional[str] = Query(None),
    session_id: Optional[str] = Query(None),
    user_agent: Optional[str] = Query(None),
    
    background_tasks: BackgroundTasks = None,
    db: AsyncSession = Depends(get_async_db)
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–¥—É–∫—Ç–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å
        client_ip = get_client_ip(request)
        
        # –ü–æ–ª—É—á–∞–µ–º User-Agent –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        if not user_agent:
            user_agent = request.headers.get("User-Agent", "")
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        session_data = {}
        
        # –ò–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if page_type:
            session_data['page_type'] = page_type
        if location:
            session_data['location'] = location
        if referrer:
            session_data['referrer'] = referrer
        if device_type:
            session_data['device_type'] = device_type
        if url:
            session_data['url'] = url
        if timestamp:
            session_data['timestamp'] = timestamp
        if session_id:
            session_data['session_id'] = session_id
        
        # –ò–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –∑–∞–ø—Ä–æ—Å–∞
        session_data['user_agent'] = user_agent
        session_data['ip_address'] = client_ip
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        import logging
        logger = logging.getLogger(__name__)
        logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")
        logger.info(f"üìã IP –∞–¥—Ä–µ—Å: {client_ip}")
        logger.info(f"üìã User-Agent: {user_agent}")
        logger.info(f"üìã –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {session_data}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ —Ñ–æ–Ω–µ –∏–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        if background_tasks:
            background_tasks.add_task(
                ProductRanking.process_product_view,
                db,
                product_id,
                session_data
            )
        else:
            await ProductRanking.process_product_view(db, product_id, session_data)
        
        logger.info(f"‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        return {"success": True}
        
    except Exception as e:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {str(e)}")
        return {"success": False, "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}"}

@router.get("/product/{product_id}/interaction/")
async def track_product_interaction(
    request: Request,
    product_id: int,
    interaction_type: str = Query(...),
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    duration_seconds: Optional[int] = Query(None),
    image_index: Optional[int] = Query(None),
    action: Optional[str] = Query(None),
    button_text: Optional[str] = Query(None),
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Å—Å–∏–∏
    page_type: Optional[str] = Query(None),
    location: Optional[str] = Query(None),
    referrer: Optional[str] = Query(None),
    device_type: Optional[str] = Query(None),
    url: Optional[str] = Query(None),
    timestamp: Optional[str] = Query(None),
    session_id: Optional[str] = Query(None),
    user_agent: Optional[str] = Query(None),
    
    background_tasks: BackgroundTasks = None,
    db: AsyncSession = Depends(get_async_db)
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å
        client_ip = get_client_ip(request)
        
        # –ü–æ–ª—É—á–∞–µ–º User-Agent –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        if not user_agent:
            user_agent = request.headers.get("User-Agent", "")
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        interaction_data = {}
        if duration_seconds is not None:
            interaction_data['duration_seconds'] = duration_seconds
        if image_index is not None:
            interaction_data['image_index'] = image_index
        if action:
            interaction_data['action'] = action
        if button_text:
            interaction_data['button_text'] = button_text
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        session_data = {}
        if page_type:
            session_data['page_type'] = page_type
        if location:
            session_data['location'] = location
        if referrer:
            session_data['referrer'] = referrer
        if device_type:
            session_data['device_type'] = device_type
        if url:
            session_data['url'] = url
        if timestamp:
            session_data['timestamp'] = timestamp
        if session_id:
            session_data['session_id'] = session_id
        
        # –ò–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –∑–∞–ø—Ä–æ—Å–∞
        session_data['user_agent'] = user_agent
        session_data['ip_address'] = client_ip
        
        # –õ–æ–≥–∏—Ä—É–µ–º
        import logging
        logger = logging.getLogger(__name__)
        logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ '{interaction_type}' –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")
        logger.info(f"üìã IP –∞–¥—Ä–µ—Å: {client_ip}")
        logger.info(f"üìã User-Agent: {user_agent}")
        logger.info(f"üìã –î–∞–Ω–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {interaction_data}")
        logger.info(f"üìã –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {session_data}")
        
        if background_tasks:
            background_tasks.add_task(
                ProductRanking.process_product_interaction,
                db,
                product_id,
                interaction_type,
                interaction_data,
                session_data
            )
        else:
            await ProductRanking.process_product_interaction(
                db,
                product_id,
                interaction_type,
                interaction_data,
                session_data
            )
        
        logger.info(f"‚úÖ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ '{interaction_type}' –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        return {"success": True}
        
    except Exception as e:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è '{interaction_type}' –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {str(e)}")
        return {"success": False, "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}"}

@router.post("/batch")
async def process_analytics_batch(
    events: Dict[str, List[Dict[str, Any]]],
    background_tasks: BackgroundTasks = None,
    db: AsyncSession = Depends(get_async_db)
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç —Å–æ–±—ã—Ç–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        event_list = events.get("events", [])
        
        if not event_list:
            return {"success": False, "message": "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"}
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if background_tasks:
            background_tasks.add_task(
                ProductRanking.process_analytics_events,
                db,
                event_list
            )
        else:
            # –ò–Ω–∞—á–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            await ProductRanking.process_analytics_events(db, event_list)
        
        return {"success": True, "message": f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(event_list)} —Å–æ–±—ã—Ç–∏–π"}
        
    except Exception as e:
        import traceback
        error_details = traceback.format_exc()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {error_details}")
        return {"success": False, "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}"}
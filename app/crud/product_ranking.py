# app/crud/product_ranking.py
import logging
import uuid
from datetime import datetime, date
from typing import Any, Dict, List, Optional
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession
from app.models.analytics import AnalyticsDailySummary, AnalyticsEvent, AnalyticsSession
from app.models.product_ranking import ProductRanking as ProductRankingModel

logger = logging.getLogger(__name__)

class ProductRanking:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
    
    @staticmethod
    async def process_product_view(
        db: AsyncSession, 
        product_id: Any, 
        session_data: Dict[str, Any] = None
    ) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–¥—É–∫—Ç–∞
        """
        logger.info(f"üîç ProductRanking.process_product_view: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")
        logger.info(f"üìã –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {session_data}")
        
        try:
            session_data = session_data or {}
            
            # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
            await ProductRanking._save_analytics_event(
                db=db,
                product_id=product_id,
                event_type='view',
                event_subtype='product_page',
                event_data={},
                session_data=session_data
            )
            logger.info("‚úÖ –°–æ–±—ã—Ç–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            
            # 2. –û–±–Ω–æ–≤–ª—è–µ–º/—Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            logger.info("üë§ –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é...")
            session_id = ProductRanking._get_or_generate_session_id(session_data)
            await ProductRanking._update_session(db, session_id, session_data, 'product_view')
            logger.info("‚úÖ –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            
            # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–∞
            logger.info("‚≠ê –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–∞...")
            await ProductRanking._update_product_ranking(db, product_id, 'view')
            logger.info("‚úÖ –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω")
            
            # 4. –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            logger.info("üìà –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
            await ProductRanking._update_daily_summary(db, product_id, 'view')
            logger.info("‚úÖ –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            
            # 5. –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            logger.info("üíæ –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î...")
            await db.commit()
            logger.info(f"‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {str(e)}")
            logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            logger.error(f"‚ùå Stacktrace: {traceback.format_exc()}")
            await db.rollback()
            raise

    @staticmethod
    async def process_product_interaction(
        db: AsyncSession,
        product_id: Any,
        interaction_type: str,
        interaction_data: Dict[str, Any] = None,
        session_data: Dict[str, Any] = None
    ) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º
        """
        logger.info(f"üîç ProductRanking.process_product_interaction: –ø—Ä–æ–¥—É–∫—Ç {product_id}, —Ç–∏–ø {interaction_type}")
        logger.info(f"üìã –î–∞–Ω–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {interaction_data}")
        logger.info(f"üìã –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {session_data}")
        
        try:
            session_data = session_data or {}
            interaction_data = interaction_data or {}
            
            # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É...")
            await ProductRanking._save_analytics_event(
                db=db,
                product_id=product_id,
                event_type='interaction',
                event_subtype=interaction_type,
                event_data=interaction_data,
                session_data=session_data
            )
            logger.info("‚úÖ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            
            # 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
            logger.info("üë§ –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é...")
            session_id = ProductRanking._get_or_generate_session_id(session_data)
            await ProductRanking._update_session(db, session_id, session_data, 'interaction')
            logger.info("‚úÖ –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            
            # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–∞
            logger.info("‚≠ê –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–∞...")
            await ProductRanking._update_product_ranking(db, product_id, 'interaction', interaction_type, interaction_data)
            logger.info("‚úÖ –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω")
            
            # 4. –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            logger.info("üìà –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
            await ProductRanking._update_daily_summary(db, product_id, 'interaction')
            logger.info("‚úÖ –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            
            # 5. –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            logger.info("üíæ –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î...")
            await db.commit()
            logger.info(f"‚úÖ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ '{interaction_type}' –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è '{interaction_type}' –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {str(e)}")
            logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            logger.error(f"‚ùå Stacktrace: {traceback.format_exc()}")
            await db.rollback()
            raise

    @staticmethod
    async def _save_analytics_event(
        db: AsyncSession,
        product_id: int,
        event_type: str,
        event_subtype: str = None,
        event_data: Dict[str, Any] = None,
        session_data: Dict[str, Any] = None
    ) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ –ë–î
        """
        logger.info(f"üíæ _save_analytics_event: {event_type}/{event_subtype} –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")
        
        session_data = session_data or {}
        event_data = event_data or {}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        session_id = ProductRanking._get_or_generate_session_id(session_data)
        user_agent = session_data.get('user_agent', '')
        device_type = session_data.get('device_type', 'unknown')
        referrer = session_data.get('referrer', '')
        page_url = session_data.get('url', '')
        ip_address = session_data.get('ip_address', '')  # –î–æ–±–∞–≤–ª—è–µ–º IP –∞–¥—Ä–µ—Å
        
        logger.info(f"üîß –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç AnalyticsEvent:")
        logger.info(f"   - product_id: {product_id}")
        logger.info(f"   - session_id: {session_id}")
        logger.info(f"   - user_agent: {user_agent[:50]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤
        logger.info(f"   - device_type: {device_type}")
        logger.info(f"   - page_url: {page_url}")
        logger.info(f"   - ip_address: {ip_address}")
        logger.info(f"   - referrer: {referrer}")
        
        try:
            event = AnalyticsEvent(
                product_id=product_id,
                event_type=event_type,
                event_subtype=event_subtype,
                event_data=event_data,
                session_id=session_id,
                user_agent=user_agent,
                device_type=device_type,
                referrer=referrer,
                page_url=page_url,
                ip_address=ip_address,  # –î–æ–±–∞–≤–ª—è–µ–º IP –∞–¥—Ä–µ—Å
            )
            
            logger.info("‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Å–µ—Å—Å–∏—é –ë–î...")
            db.add(event)
            
            logger.info("üíæ –í—ã–ø–æ–ª–Ω—è–µ–º flush...")
            await db.flush()
            
            logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å ID: {event.id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ AnalyticsEvent: {str(e)}")
            import traceback
            logger.error(f"‚ùå Stacktrace: {traceback.format_exc()}")
            raise
    @staticmethod
    async def _update_session(
        db: AsyncSession,
        session_id: str,
        session_data: Dict[str, Any],
        action_type: str
    ) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        logger.info(f"üë§ _update_session: {session_id}, —Ç–∏–ø: {action_type}")
        
        try:
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
            logger.info("üîç –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é...")
            query = select(AnalyticsSession).where(AnalyticsSession.session_id == session_id)
            result = await db.execute(query)
            session = result.scalar_one_or_none()
            
            if not session:
                logger.info("‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é...")
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                session = AnalyticsSession(
                    session_id=session_id,
                    user_agent=session_data.get('user_agent', ''),
                    device_type=session_data.get('device_type', 'unknown'),
                    first_page=session_data.get('url', ''),
                    referrer=session_data.get('referrer', ''),
                )
                db.add(session)
                logger.info(f"‚úÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_id}")
            else:
                logger.info(f"üìù –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é: {session_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            session.last_page = session_data.get('url', session.last_page)
            session.last_activity = datetime.utcnow()
            
            if action_type == 'product_view':
                session.page_views = (session.page_views or 0) + 1
                session.products_viewed = (session.products_viewed or 0) + 1
                logger.info(f"üìä –°—á–µ—Ç—á–∏–∫–∏: page_views={session.page_views}, products_viewed={session.products_viewed}")
            elif action_type == 'interaction':
                session.interactions_count = (session.interactions_count or 0) + 1
                logger.info(f"üìä –°—á–µ—Ç—á–∏–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {session.interactions_count}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
            if session.started_at:
                session.duration_seconds = int((session.last_activity - session.started_at).total_seconds())
                logger.info(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: {session.duration_seconds} —Å–µ–∫—É–Ω–¥")
            
            logger.info("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ {session_id}: {str(e)}")
            import traceback
            logger.error(f"‚ùå Stacktrace: {traceback.format_exc()}")
            raise

    @staticmethod
    async def _update_daily_summary(
        db: AsyncSession,
        product_id: int,
        action_type: str,
        duration_seconds: int = 0
    ) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–Ω–µ–≤–Ω—É—é –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        """
        logger.info(f"üìà _update_daily_summary: –ø—Ä–æ–¥—É–∫—Ç {product_id}, —Ç–∏–ø {action_type}")
        
        try:
            today = date.today()
            logger.info(f"üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: {today}")
            
            # –ò—â–µ–º –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            logger.info("üîç –ò—â–µ–º –∑–∞–ø–∏—Å—å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            query = select(AnalyticsDailySummary).where(
                AnalyticsDailySummary.product_id == product_id,
                func.date(AnalyticsDailySummary.date) == today
            )
            result = await db.execute(query)
            summary = result.scalar_one_or_none()
            
            if not summary:
                logger.info("‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                summary = AnalyticsDailySummary(
                    product_id=product_id,
                    date=datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
                )
                db.add(summary)
                logger.info(f"‚úÖ –ù–æ–≤–∞—è –¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")
            else:
                logger.info(f"üìù –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            if action_type == 'view':
                old_views = summary.views_count or 0
                summary.views_count = old_views + 1
                logger.info(f"üëÅÔ∏è –°—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {old_views} -> {summary.views_count}")
            elif action_type == 'interaction':
                old_interactions = summary.interactions_count or 0
                summary.interactions_count = old_interactions + 1
                logger.info(f"ü§ù –°—á–µ—Ç—á–∏–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {old_interactions} -> {summary.interactions_count}")
            
            if duration_seconds > 0:
                old_duration = summary.total_view_duration or 0
                summary.total_view_duration = old_duration + duration_seconds
                logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {old_duration} -> {summary.total_view_duration}")
                
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                if summary.views_count > 0:
                    summary.avg_view_duration = summary.total_view_duration // summary.views_count
                    logger.info(f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {summary.avg_view_duration}")
            
            summary.updated_at = datetime.utcnow()
            logger.info("‚úÖ –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {str(e)}")
            import traceback
            logger.error(f"‚ùå Stacktrace: {traceback.format_exc()}")
            raise

    @staticmethod
    def _get_or_generate_session_id(session_data: Dict[str, Any]) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç session_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π
        """
        session_id = session_data.get('session_id')
        if not session_id:
            session_id = str(uuid.uuid4())
            logger.info(f"üÜî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π session_id: {session_id}")
        else:
            logger.info(f"üÜî –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π session_id: {session_id}")
        return session_id

    @staticmethod
    async def _update_product_ranking(
        db: AsyncSession,
        product_id: int,
        action_type: str,
        interaction_type: str = None,
        interaction_data: Dict[str, Any] = None
    ) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–∞
        """
        logger.info(f"‚≠ê _update_product_ranking: –ø—Ä–æ–¥—É–∫—Ç {product_id}, —Ç–∏–ø {action_type}")
        
        try:
            ranking_query = select(ProductRankingModel).where(ProductRankingModel.product_id == product_id)
            result = await db.execute(ranking_query)
            ranking = result.scalar_one_or_none()
            
            if not ranking:
                logger.info("‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Ä–µ–π—Ç–∏–Ω–≥–∞...")
                ranking = ProductRankingModel(product_id=product_id)
                db.add(ranking)
                await db.flush()
                logger.info(f"‚úÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")
            else:
                logger.info(f"üìù –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")
            
            old_score = ranking.ranking_score or 0
            old_impressions = ranking.impressions_count or 0
            
            if action_type == 'view':
                ranking.impressions_count = old_impressions + 1
                ranking.ranking_score = min(100, old_score + 0.1)
                logger.info(f"üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä: impressions {old_impressions} -> {ranking.impressions_count}")
                logger.info(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {old_score} -> {ranking.ranking_score}")
            
            elif action_type == 'interaction':
                interaction_weights = {
                    "view_image": 0.2,
                    "view_duration": 0.5,
                    "contact": 1.5,
                    "default": 0.2
                }
                weight = interaction_weights.get(interaction_type, interaction_weights["default"])
                ranking.ranking_score = min(100, old_score + weight)
                logger.info(f"ü§ù –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ '{interaction_type}': —Ä–µ–π—Ç–∏–Ω–≥ {old_score} -> {ranking.ranking_score} (+{weight})")
            
            ranking.updated_at = datetime.utcnow()
            logger.info("‚úÖ –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {str(e)}")
            import traceback
            logger.error(f"‚ùå Stacktrace: {traceback.format_exc()}")
            raise

    @staticmethod
    async def process_analytics_events(db: AsyncSession, events: List[Dict[str, Any]]) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞
        """
        logger.info(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç –∏–∑ {len(events)} —Å–æ–±—ã—Ç–∏–π")
        try:
            for event in events:
                logger.info(f"üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ: {event}")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
            logger.info("‚úÖ –ü–∞–∫–µ—Ç —Å–æ–±—ã—Ç–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–∫–µ—Ç–∞ —Å–æ–±—ã—Ç–∏–π: {str(e)}")
            raise